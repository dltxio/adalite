{"version":3,"sources":["../src/Ada.js"],"names":["CLA","INS","GET_VERSION","GET_SERIAL","GET_EXT_PUBLIC_KEY","DERIVE_ADDRESS","SIGN_TX","RUN_TESTS","AddressTypeNibbles","BASE","POINTER","ENTERPRISE","BYRON","REWARD","MetadataCodes","SIGN_TX_METADATA_NO","SIGN_TX_METADATA_YES","TxOutputTypeCodes","SIGN_TX_OUTPUT_TYPE_ADDRESS","SIGN_TX_OUTPUT_TYPE_ADDRESS_PARAMS","ErrorCodes","ERR_STILL_IN_CALL","ERR_INVALID_DATA","ERR_INVALID_BIP_PATH","ERR_REJECTED_BY_USER","ERR_REJECTED_BY_POLICY","ERR_DEVICE_LOCKED","ERR_UNSUPPORTED_ADDRESS_TYPE","ERR_CLA_NOT_SUPPORTED","GH_ERRORS_LINK","ErrorMsgs","getErrorDescription","statusCode","statusCodeHex","toString","defaultMsg","wrapRetryStillInCall","fn","wrapConvertError","args","console","log","JSON","stringify","message","Ada","transport","scrambleKey","methods","decorateAppAPIMethods","send","_send","p1","p2","data","then","utils","stripRetcodeFromResponse","P1_UNUSED","P2_UNUSED","hex_to_buf","response","Assert","assert","length","major","minor","patch","flags_value","FLAG_IS_DEBUG","flags","isDebug","_getVersion","version","parseInt","isNaN","_isGetSerialSupported","Error","serial","buf_to_hex","path","Precondition","checkIsValidPath","path_to_buf","chunkBy","publicKey","chainCode","rest","publicKeyHex","chainCodeHex","addressTypeNibble","networkIdOrProtocolMagic","spendingPath","stakingPath","stakingKeyHashHex","stakingBlockchainPointer","P1_RETURN","cardano","serializeAddressInfo","addressHex","P1_DISPLAY","networkId","protocolMagic","inputs","outputs","feeStr","ttlStr","certificates","withdrawals","metadataHashHex","delay","ms","Promise","resolve","setTimeout","P1_STAGE_INIT","P1_STAGE_INPUTS","P1_STAGE_OUTPUTS","P1_STAGE_FEE","P1_STAGE_TTL","P1_STAGE_CERTIFICATES","P1_STAGE_WITHDRAWALS","P1_STAGE_METADATA","P1_STAGE_CONFIRM","P1_STAGE_WITNESSES","signTx_init","numInputs","numOutputs","numCertificates","numWithdrawals","numWitnesses","includeMetadata","Buffer","concat","uint8_to_buf","uint32_to_buf","signTx_addInput","input","txHashHex","outputIndex","signTx_addAddressOutput","amountStr","amount_to_buf","signTx_addChangeOutput","signTx_addCertificate","type","poolKeyHashHex","dataFields","push","signTx_addWithdrawal","signTx_setFee","signTx_setTtl","signTx_setMetadata","signTx_awaitConfirm","signTx_getWitness","witnessSignatureHex","witnessPathsSet","Set","witnessPaths","pathKey","has","add","output","certificate","withdrawal","witnesses","witness"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA;;AAEA;;AACA;;;;;;;;;;AAEA,IAAMA,GAAG,GAAG,IAAZ;AAEA,IAAMC,GAAG,GAAG;AACVC,EAAAA,WAAW,EAAE,IADH;AAEVC,EAAAA,UAAU,EAAE,IAFF;AAIVC,EAAAA,kBAAkB,EAAE,IAJV;AAKVC,EAAAA,cAAc,EAAE,IALN;AAOVC,EAAAA,OAAO,EAAE,IAPC;AASVC,EAAAA,SAAS,EAAE;AATD,CAAZ;AAyFO,IAAMC,kBAAkB,GAAG;AAChCC,EAAAA,IAAI,EAAE,CAD0B;AAEhCC,EAAAA,OAAO,EAAE,CAFuB;AAGhCC,EAAAA,UAAU,EAAE,CAHoB;AAIhCC,EAAAA,KAAK,EAAE,CAJyB;AAKhCC,EAAAA,MAAM,EAAE;AALwB,CAA3B;;AAQP,IAAMC,aAAa,GAAG;AACrBC,EAAAA,mBAAmB,EAAE,CADA;AAErBC,EAAAA,oBAAoB,EAAE;AAFD,CAAtB;AAKA,IAAMC,iBAAiB,GAAG;AACxBC,EAAAA,2BAA2B,EAAE,CADL;AAExBC,EAAAA,kCAAkC,EAAE;AAFZ,CAA1B;AAKO,IAAMC,UAAU,GAAG;AACxBC,EAAAA,iBAAiB,EAAE,MADK;AACG;AAC3BC,EAAAA,gBAAgB,EAAE,MAFM;AAGxBC,EAAAA,oBAAoB,EAAE,MAHE;AAIxBC,EAAAA,oBAAoB,EAAE,MAJE;AAKxBC,EAAAA,sBAAsB,EAAE,MALA;AAMxBC,EAAAA,iBAAiB,EAAE,MANK;AAOxBC,EAAAA,4BAA4B,EAAE,MAPN;AASxB;AACAC,EAAAA,qBAAqB,EAAE;AAVC,CAAnB;;AAaP,IAAMC,cAAc,GAClB,mFADF;AAGA,IAAMC,SAAS,kEACZV,UAAU,CAACE,gBADC,EACkB,iCADlB,gDAEZF,UAAU,CAACG,oBAFC,EAGX,4CAHW,gDAIZH,UAAU,CAACI,oBAJC,EAIsB,yBAJtB,gDAKZJ,UAAU,CAACK,sBALC,EAMX,6CANW,gDAOZL,UAAU,CAACM,iBAPC,EAOmB,kBAPnB,gDAQZN,UAAU,CAACQ,qBARC,EAQuB,kBARvB,gDASZR,UAAU,CAACO,4BATC,EAS8B,0BAT9B,cAAf;;AAYO,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,UAAD,EAAwB;AACzD,MAAMC,aAAa,eAAQD,UAAU,CAACE,QAAX,CAAoB,EAApB,CAAR,CAAnB;AACA,MAAMC,UAAU,2BAAoBF,aAApB,8BAAqDJ,cAArD,CAAhB;AAEA,SAAOC,SAAS,CAACE,UAAD,CAAT,IAAyBG,UAAhC;AACD,CALM,C,CAOP;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,EAAE;AAAA,oGAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAElBA,EAAE,MAAF,eAFkB;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,kBAI3B,eAAK,YAAEL,UAAP,IAAqB,YAAEA,UAAF,KAAiBZ,UAAU,CAACC,iBAJtB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMhBgB,EAAE,MAAF,eANgB;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;AAAA,CAA/B;;AAYA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAD,EAAE;AAAA,oGAAI;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,uCAAUE,IAAV;AAAUA,cAAAA,IAAV;AAAA;;AAE3BC,YAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAZ;AAF2B;AAAA,mBAGdF,EAAE,MAAF,SAAME,IAAN,CAHc;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAK3B,gBAAI,gBAAK,aAAEP,UAAX,EAAuB;AACrB;AACA;AACA,2BAAEY,OAAF,4BAA8Bb,mBAAmB,CAAC,aAAEC,UAAH,CAAjD;AACD;;AAT0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;AAAA,CAA3B;AAcA;;;;;;;;;IAUqBa,G;AAKnB,eAAYC,SAAZ,EAAkE;AAAA,QAA7BC,WAA6B,uEAAP,KAAO;AAAA;AAChE,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKE,OAAL,GAAe,CACb,YADa,EAEb,WAFa,EAGb,sBAHa,EAIb,iBAJa,EAKb,eALa,EAMb,aANa,CAAf;AAQA,SAAKF,SAAL,CAAeG,qBAAf,CAAqC,IAArC,EAA2C,KAAKD,OAAhD,EAAyDD,WAAzD;AACA,SAAKG,IAAL,GAAYZ,gBAAgB,CAAC,KAAKQ,SAAL,CAAeI,IAAhB,CAA5B;AACD;;;;;;;;;;;;;;AAGOC,gBAAAA,K,GAAQ,SAARA,KAAQ,CAACC,EAAD,EAAKC,EAAL,EAASC,IAAT;AAAA,yBACZ,KAAI,CAACJ,IAAL,CAAUlD,GAAV,EAAeC,GAAG,CAACC,WAAnB,EAAgCkD,EAAhC,EAAoCC,EAApC,EAAwCC,IAAxC,EAA8CC,IAA9C,CACEC,kBAAMC,wBADR,CADY;AAAA,iB;;AAIRC,gBAAAA,S,GAAY,I;AACZC,gBAAAA,S,GAAY,I,EAClB;;;uBACuBvB,oBAAoB,CAACe,KAAD,CAApB,CACrBO,SADqB,EAErBC,SAFqB,EAGrBH,kBAAMI,UAAN,CAAiB,EAAjB,CAHqB,C;;;AAAjBC,gBAAAA,Q;;AAKNC,8BAAOC,MAAP,CAAcF,QAAQ,CAACG,MAAT,IAAmB,CAAjC;;4DAC2CH,Q,MAApCI,K,iBAAOC,K,iBAAOC,K,iBAAOC,W;AAEtBC,gBAAAA,a,GAAgB,C,EACtB;;AAEMC,gBAAAA,K,GAAQ;AACZC,kBAAAA,OAAO,EAAE,CAACH,WAAW,GAAGC,aAAf,KAAiCA;AAD9B,iB;kDAGP;AAAEJ,kBAAAA,KAAK,EAALA,KAAF;AAASC,kBAAAA,KAAK,EAALA,KAAT;AAAgBC,kBAAAA,KAAK,EAALA,KAAhB;AAAuBG,kBAAAA,KAAK,EAALA;AAAvB,iB;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;;;;;;;;;kDAWS,KAAKE,WAAL,E;;;;;;;;;;;;;;;;;;0CAGaC,O,EAAsC;AAC1D,UAAMR,KAAK,GAAGS,QAAQ,CAACD,OAAO,CAACR,KAAT,CAAtB;AACA,UAAMC,KAAK,GAAGQ,QAAQ,CAACD,OAAO,CAACP,KAAT,CAAtB;AACA,UAAMC,KAAK,GAAGO,QAAQ,CAACD,OAAO,CAACN,KAAT,CAAtB;AACA,UAAIQ,KAAK,CAACV,KAAD,CAAL,IAAgBU,KAAK,CAACT,KAAD,CAArB,IAAgCS,KAAK,CAACR,KAAD,CAAzC,EACE,OAAO,KAAP;;AAEF,UAAIF,KAAK,GAAG,CAAZ,EAAe;AACb,eAAO,IAAP;AACD,OAFD,MAEO,IAAIA,KAAK,IAAI,CAAb,EAAgB;AACrB,eAAOC,KAAK,IAAI,CAAhB;AACD,OAFM,MAEA;AACL,eAAO,KAAP;AACD;AACF;AAED;;;;;;;;;;;;;;;;;;;;;;;;uBAWwB,KAAKM,WAAL,E;;;AAAhBC,gBAAAA,O;;oBACD,KAAKG,qBAAL,CAA2BH,OAA3B,C;;;;;sBACG,IAAII,KAAJ,CAAU,4CAAV,C;;;AAEF1B,gBAAAA,K,GAAQ,SAARA,KAAQ,CAACC,EAAD,EAAKC,EAAL,EAASC,IAAT;AAAA,yBACZ,MAAI,CAACJ,IAAL,CAAUlD,GAAV,EAAeC,GAAG,CAACE,UAAnB,EAA+BiD,EAA/B,EAAmCC,EAAnC,EAAuCC,IAAvC,EAA6CC,IAA7C,CACEC,kBAAMC,wBADR,CADY;AAAA,iB;;AAIRC,gBAAAA,S,GAAY,I;AACZC,gBAAAA,S,GAAY,I;;uBACKvB,oBAAoB,CAACe,KAAD,CAApB,CACrBO,SADqB,EAErBC,SAFqB,EAGrBH,kBAAMI,UAAN,CAAiB,EAAjB,CAHqB,C;;;AAAjBC,gBAAAA,Q;;AAKNC,8BAAOC,MAAP,CAAcF,QAAQ,CAACG,MAAT,IAAmB,CAAjC;;AAEMc,gBAAAA,M,GAAStB,kBAAMuB,UAAN,CAAiBlB,QAAjB,C;kDACR;AAAEiB,kBAAAA,MAAM,EAANA;AAAF,iB;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;;;;;uBAMQ1C,oBAAoB,CAAC,KAAKc,IAAN,CAApB,CAAgClD,GAAhC,EAAqCC,GAAG,CAACM,SAAzC,EAAoD,IAApD,EAA0D,IAA1D,C;;;;;;;;;;;;;;;;AAGR;;;;;;;;;;;;;;;kIAYEyE,I;;;;;;;;;AAEAC,oCAAaC,gBAAb,CAA8BF,IAA9B;;AAEM7B,gBAAAA,K,GAAQ,SAARA,KAAQ,CAACC,EAAD,EAAKC,EAAL,EAASC,IAAT;AAAA,yBACZ,MAAI,CAACJ,IAAL,CAAUlD,GAAV,EAAeC,GAAG,CAACG,kBAAnB,EAAuCgD,EAAvC,EAA2CC,EAA3C,EAA+CC,IAA/C,EAAqDC,IAArD,CACEC,kBAAMC,wBADR,CADY;AAAA,iB;;AAKRC,gBAAAA,S,GAAY,I;AACZC,gBAAAA,S,GAAY,I;AAEZL,gBAAAA,I,GAAOE,kBAAM2B,WAAN,CAAkBH,IAAlB,C;;uBAEU5C,oBAAoB,CAACe,KAAD,CAApB,CACrBO,SADqB,EAErBC,SAFqB,EAGrBL,IAHqB,C;;;AAAjBO,gBAAAA,Q;iCAM+BL,kBAAM4B,OAAN,CAAcvB,QAAd,EAAwB,CAAC,EAAD,EAAK,EAAL,CAAxB,C,wEAA9BwB,S,uBAAWC,S,uBAAWC,I;;AAC7BzB,8BAAOC,MAAP,CAAcwB,IAAI,CAACvB,MAAL,IAAe,CAA7B;;kDAEO;AACLwB,kBAAAA,YAAY,EAAEH,SAAS,CAACnD,QAAV,CAAmB,KAAnB,CADT;AAELuD,kBAAAA,YAAY,EAAEH,SAAS,CAACpD,QAAV,CAAmB,KAAnB;AAFT,iB;;;;;;;;;;;;;;;;AAMT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2HAkCIwD,iB,EACAC,wB,EACAC,Y;;;;;;;;;;;;;;;;;AACAC,gBAAAA,W,8DAA0B,I;AAC1BC,gBAAAA,iB,8DAA6B,I;AAC7BC,gBAAAA,wB,8DAAsD,I;;AAElD5C,gBAAAA,K,GAAQ,SAARA,KAAQ,CAACC,EAAD,EAAKC,EAAL,EAASC,IAAT;AAAA,yBACZ,MAAI,CAACJ,IAAL,CAAUlD,GAAV,EAAeC,GAAG,CAACI,cAAnB,EAAmC+C,EAAnC,EAAuCC,EAAvC,EAA2CC,IAA3C,EAAiDC,IAAjD,CACEC,kBAAMC,wBADR,CADY;AAAA,iB;;AAKRuC,gBAAAA,S,GAAY,I;AACZrC,gBAAAA,S,GAAY,I;AAGZL,gBAAAA,I,GAAO2C,oBAAQC,oBAAR,CACXR,iBADW,EAEXC,wBAFW,EAGXC,YAHW,EAIXC,WAJW,EAKXC,iBALW,EAMXC,wBANW,C;;uBASU5C,KAAK,CAAC6C,SAAD,EAAYrC,SAAZ,EAAuBL,IAAvB,C;;;AAAtBO,gBAAAA,Q;kDAEC;AACLsC,kBAAAA,UAAU,EAAEtC,QAAQ,CAAC3B,QAAT,CAAkB,KAAlB;AADP,iB;;;;;;;;;;;;;;;;;;;yHAMLwD,iB,EACAC,wB,EACAC,Y;;;;;;;;;;;;;;;;;AACAC,gBAAAA,W,8DAA0B,I;AAC1BC,gBAAAA,iB,8DAA6B,I;AAC7BC,gBAAAA,wB,8DAAsD,I;;AAElD5C,gBAAAA,K,GAAQ,SAARA,KAAQ,CAACC,EAAD,EAAKC,EAAL,EAASC,IAAT;AAAA,yBACZ,MAAI,CAACJ,IAAL,CAAUlD,GAAV,EAAeC,GAAG,CAACI,cAAnB,EAAmC+C,EAAnC,EAAuCC,EAAvC,EAA2CC,IAA3C,EAAiDC,IAAjD,CACEC,kBAAMC,wBADR,CADY;AAAA,iB;;AAKR2C,gBAAAA,U,GAAa,I;AACbzC,gBAAAA,S,GAAY,I;AACZL,gBAAAA,I,GAAO2C,oBAAQC,oBAAR,CACXR,iBADW,EAEXC,wBAFW,EAGXC,YAHW,EAIXC,WAJW,EAKXC,iBALW,EAMXC,wBANW,C;;uBASU5C,KAAK,CAACiD,UAAD,EAAazC,SAAb,EAAwBL,IAAxB,C;;;AAAtBO,gBAAAA,Q;;AACNC,8BAAOC,MAAP,CAAcF,QAAQ,CAACG,MAAT,IAAmB,CAAjC;;;;;;;;;;;;;;;;;;;8HAIAqC,S,EACAC,a,EACAC,M,EACAC,O,EACAC,M,EACAC,M,EACAC,Y,EACAC,W,EACAC,e;;;2MAgBSC,K;;;;;;AAAAA,gBAAAA,K,mBAAMC,E,EAAI;AACjB,yBAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO;AAAA,2BAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAd;AAAA,mBAAnB,CAAP;AACD,iB;;AAhBD;AAEMI,gBAAAA,a,GAAgB,I;AAChBC,gBAAAA,e,GAAkB,I;AAClBC,gBAAAA,gB,GAAmB,I;AACnBC,gBAAAA,Y,GAAe,I;AACfC,gBAAAA,Y,GAAe,I;AACfC,gBAAAA,qB,GAAwB,I;AACxBC,gBAAAA,oB,GAAuB,I;AACvBC,gBAAAA,iB,GAAoB,I;AACpBC,gBAAAA,gB,GAAmB,I;AACnBC,gBAAAA,kB,GAAqB,I;AACrBjE,gBAAAA,S,GAAY,I;;AAMZR,gBAAAA,K;4GAAQ,mBAAOC,EAAP,EAAWC,EAAX,EAAeC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA,+DACLwD,KAAK,CAAC,IAAD,CAAL,CAAYvD,IAAZ,CAAiB;AAAA,qCAAM,MAAI,CAACL,IAAL,CAAUlD,GAAV,EAAeC,GAAG,CAACK,OAAnB,EAA4B8C,EAA5B,EAAgCC,EAAhC,EAAoCC,IAApC,EAA0CC,IAA1C,CAC5BC,kBAAMC,wBADsB,CAAN;AAAA,6BAAjB,CADK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mB;;kCAARN,K;;;;;AAMA0E,gBAAAA,W;4GAAc,mBAClBxB,SADkB,EAElBC,aAFkB,EAGlBwB,SAHkB,EAIlBC,UAJkB,EAKlBC,eALkB,EAMlBC,cANkB,EAOlBC,YAPkB,EAQlBC,eARkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAUZ7E,4BAAAA,IAVY,GAUL8E,MAAM,CAACC,MAAP,CAAc,CACzB7E,kBAAM8E,YAAN,CAAmBjC,SAAnB,CADyB,EAEzB7C,kBAAM+E,aAAN,CAAoBjC,aAApB,CAFyB,EAGzB9C,kBAAM8E,YAAN,CACEH,eAAe,GACbrH,aAAa,CAACE,oBADD,GAEbF,aAAa,CAACC,mBAHlB,CAHyB,EAQzByC,kBAAM+E,aAAN,CAAoBT,SAApB,CARyB,EASzBtE,kBAAM+E,aAAN,CAAoBR,UAApB,CATyB,EAUzBvE,kBAAM+E,aAAN,CAAoBP,eAApB,CAVyB,EAWzBxE,kBAAM+E,aAAN,CAAoBN,cAApB,CAXyB,EAYzBzE,kBAAM+E,aAAN,CAAoBL,YAApB,CAZyB,CAAd,CAVK;AAAA;AAAA,mCAwBK9F,oBAAoB,CAACe,KAAD,CAApB,CACrBgE,aADqB,EAErBxD,SAFqB,EAGrBL,IAHqB,CAxBL;;AAAA;AAwBZO,4BAAAA,QAxBY;;AA6BlBC,0CAAOC,MAAP,CAAcF,QAAQ,CAACG,MAAT,IAAmB,CAAjC;;AA7BkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mB;;kCAAd6D,W;;;;;AAgCAW,gBAAAA,e;4GAAkB,mBACtBC,KADsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAGhBnF,4BAAAA,IAHgB,GAGT8E,MAAM,CAACC,MAAP,CAAc,CACzB7E,kBAAMI,UAAN,CAAiB6E,KAAK,CAACC,SAAvB,CADyB,EAEzBlF,kBAAM+E,aAAN,CAAoBE,KAAK,CAACE,WAA1B,CAFyB,CAAd,CAHS;AAOtBnG,4BAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBC,IAAI,CAACC,SAAL,CAAe8F,KAAf,CAArB;AAPsB;AAAA,mCAQCtF,KAAK,CAACiE,eAAD,EAAkBzD,SAAlB,EAA6BL,IAA7B,CARN;;AAAA;AAQhBO,4BAAAA,QARgB;;AAStBC,0CAAOC,MAAP,CAAcF,QAAQ,CAACG,MAAT,IAAmB,CAAjC;;AATsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mB;;kCAAlBwE,e;;;;;AAYAI,gBAAAA,uB;4GAA0B,mBAC9BzC,UAD8B,EAE9B0C,SAF8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAIxBvF,4BAAAA,IAJwB,GAIjB8E,MAAM,CAACC,MAAP,CAAc,CACzB7E,kBAAMsF,aAAN,CAAoBD,SAApB,CADyB,EAEzBrF,kBAAM8E,YAAN,CAAmBrH,iBAAiB,CAACC,2BAArC,CAFyB,EAGzBsC,kBAAMI,UAAN,CAAiBuC,UAAjB,CAHyB,CAAd,CAJiB;AAS9B3D,4BAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBC,IAAI,CAACC,SAAL,CAAe;AAACwD,8BAAAA,UAAU,EAAVA,UAAD;AAAa0C,8BAAAA,SAAS,EAATA;AAAb,6BAAf,CAAtB;AAT8B;AAAA,mCAUP1F,KAAK,CAACkE,gBAAD,EAAmB1D,SAAnB,EAA8BL,IAA9B,CAVE;;AAAA;AAUxBO,4BAAAA,QAVwB;;AAW9BC,0CAAOC,MAAP,CAAcF,QAAQ,CAACG,MAAT,IAAmB,CAAjC;;AAX8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mB;;kCAA1B4E,uB;;;;;AAcAG,gBAAAA,sB;4GAAyB,mBAC7BrD,iBAD6B,EAE7BE,YAF6B,EAG7BiD,SAH6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI7BhD,4BAAAA,WAJ6B,iEAIH,IAJG;AAK7BC,4BAAAA,iBAL6B,iEAKA,IALA;AAM7BC,4BAAAA,wBAN6B,iEAMyB,IANzB;AAUvBzC,4BAAAA,IAVuB,GAUhB8E,MAAM,CAACC,MAAP,CAAc,CACzB7E,kBAAMsF,aAAN,CAAoBD,SAApB,CADyB,EAEzBrF,kBAAM8E,YAAN,CAAmBrH,iBAAiB,CAACE,kCAArC,CAFyB,EAGzB8E,oBAAQC,oBAAR,CACER,iBADF,EAEEA,iBAAiB,IAAIlF,kBAAkB,CAACI,KAAxC,GAAgD0F,aAAhD,GAAgED,SAFlE,EAGET,YAHF,EAIEC,WAJF,EAKEC,iBALF,EAMEC,wBANF,CAHyB,CAAd,CAVgB;AAsB7BvD,4BAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BC,IAAI,CAACC,SAAL,CAAe;AAAC+C,8BAAAA,iBAAiB,EAAjBA,iBAAD;AAC1CE,8BAAAA,YAAY,EAAZA,YAD0C;AAE1CiD,8BAAAA,SAAS,EAATA,SAF0C;AAG1ChD,8BAAAA,WAAW,EAAXA,WAH0C;AAI1CC,8BAAAA,iBAAiB,EAAjBA,iBAJ0C;AAK1CC,8BAAAA,wBAAwB,EAAxBA;AAL0C,6BAAf,CAA7B;AAtB6B;AAAA,mCA6BN5C,KAAK,CAACkE,gBAAD,EAAmB1D,SAAnB,EAA8BL,IAA9B,CA7BC;;AAAA;AA6BvBO,4BAAAA,QA7BuB;;AA8B7BC,0CAAOC,MAAP,CAAcF,QAAQ,CAACG,MAAT,IAAmB,CAAjC;;AA9B6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mB;;kCAAzB+E,sB;;;;;AAiCAC,gBAAAA,qB;4GAAwB,mBAC5BC,IAD4B,EAE5BjE,IAF4B,EAG5BkE,cAH4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAKtBC,4BAAAA,UALsB,GAKT,CACjB3F,kBAAM8E,YAAN,CAAmBW,IAAnB,CADiB,EAEjBzF,kBAAM2B,WAAN,CAAkBH,IAAlB,CAFiB,CALS;;AAU5B,gCAAIkE,cAAc,IAAI,IAAtB,EAA4B;AAC1BC,8BAAAA,UAAU,CAACC,IAAX,CAAgB5F,kBAAMI,UAAN,CAAiBsF,cAAjB,CAAhB;AACD;;AACD1G,4BAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BC,IAAI,CAACC,SAAL,CAAe;AAACsG,8BAAAA,IAAI,EAAJA,IAAD;AAAOjE,8BAAAA,IAAI,EAAJA,IAAP;AAAakE,8BAAAA,cAAc,EAAdA;AAAb,6BAAf,CAA3B;AACM5F,4BAAAA,IAdsB,GAcf8E,MAAM,CAACC,MAAP,CAAcc,UAAd,CAde;AAAA;AAAA,mCAeLhG,KAAK,CAACqE,qBAAD,EAAwB7D,SAAxB,EAAmCL,IAAnC,CAfA;;AAAA;AAetBO,4BAAAA,QAfsB;;AAgB5BC,0CAAOC,MAAP,CAAcF,QAAQ,CAACG,MAAT,IAAmB,CAAjC;;AAhB4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mB;;kCAAxBgF,qB;;;;;AAmBAK,gBAAAA,oB;4GAAuB,mBAC3BrE,IAD2B,EAE3B6D,SAF2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAIrBvF,4BAAAA,IAJqB,GAId8E,MAAM,CAACC,MAAP,CAAc,CACzB7E,kBAAMsF,aAAN,CAAoBD,SAApB,CADyB,EAEzBrF,kBAAM2B,WAAN,CAAkBH,IAAlB,CAFyB,CAAd,CAJc;AAQ3BxC,4BAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BC,IAAI,CAACC,SAAL,CAAe;AAACqC,8BAAAA,IAAI,EAAJA,IAAD;AAAO6D,8BAAAA,SAAS,EAATA;AAAP,6BAAf,CAA1B;AAR2B;AAAA,mCASJ1F,KAAK,CAACsE,oBAAD,EAAuB9D,SAAvB,EAAkCL,IAAlC,CATD;;AAAA;AASrBO,4BAAAA,QATqB;;AAU3BC,0CAAOC,MAAP,CAAcF,QAAQ,CAACG,MAAT,IAAmB,CAAjC;;AAV2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mB;;kCAAvBqF,oB;;;;;AAaAC,gBAAAA,a;6GAAgB,mBACpB7C,MADoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAGdnD,4BAAAA,IAHc,GAGP8E,MAAM,CAACC,MAAP,CAAc,CACzB7E,kBAAMsF,aAAN,CAAoBrC,MAApB,CADyB,CAAd,CAHO;AAMpBjE,4BAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBC,IAAI,CAACC,SAAL,CAAe;AAAC8D,8BAAAA,MAAM,EAANA;AAAD,6BAAf,CAAnB;AANoB;AAAA,mCAOGtD,KAAK,CAACmE,YAAD,EAAe3D,SAAf,EAA0BL,IAA1B,CAPR;;AAAA;AAOdO,4BAAAA,QAPc;;AAQpBC,0CAAOC,MAAP,CAAcF,QAAQ,CAACG,MAAT,IAAmB,CAAjC;;AARoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mB;;kCAAhBsF,a;;;;;AAWAC,gBAAAA,a;6GAAgB,mBACpB7C,MADoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAGdpD,4BAAAA,IAHc,GAGP8E,MAAM,CAACC,MAAP,CAAc,CACzB7E,kBAAMsF,aAAN,CAAoBpC,MAApB,CADyB,CAAd,CAHO;AAMpBlE,4BAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBC,IAAI,CAACC,SAAL,CAAe;AAAC+D,8BAAAA,MAAM,EAANA;AAAD,6BAAf,CAAnB;AANoB;AAAA,mCAOGvD,KAAK,CAACoE,YAAD,EAAe5D,SAAf,EAA0BL,IAA1B,CAPR;;AAAA;AAOdO,4BAAAA,QAPc;;AAQpBC,0CAAOC,MAAP,CAAcF,QAAQ,CAACG,MAAT,IAAmB,CAAjC;;AARoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mB;;kCAAhBuF,a;;;;;AAWAC,gBAAAA,kB;6GAAqB,mBACzB3C,eADyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAGnBvD,4BAAAA,IAHmB,GAGZE,kBAAMI,UAAN,CAAiBiD,eAAjB,CAHY;AAAA;AAAA,mCAKF1D,KAAK,CAACuE,iBAAD,EAAoB/D,SAApB,EAA+BL,IAA/B,CALH;;AAAA;AAKnBO,4BAAAA,QALmB;;AAMzBC,0CAAOC,MAAP,CAAcF,QAAQ,CAACG,MAAT,IAAmB,CAAjC;;AANyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mB;;kCAArBwF,kB;;;;;AASAC,gBAAAA,mB;6GAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAGHtG,KAAK,CAC1BwE,gBAD0B,EAE1BhE,SAF0B,EAG1BH,kBAAMI,UAAN,CAAiB,EAAjB,CAH0B,CAHF;;AAAA;AAGpBC,4BAAAA,QAHoB;AAAA,+DAQnB;AACL6E,8BAAAA,SAAS,EAAE7E,QAAQ,CAAC3B,QAAT,CAAkB,KAAlB;AADN,6BARmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mB;;kCAAtBuH,mB;;;;;AAaAC,gBAAAA,iB;6GAAoB,mBACxB1E,IADwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAMlB1B,4BAAAA,IANkB,GAMX8E,MAAM,CAACC,MAAP,CAAc,CAAC7E,kBAAM2B,WAAN,CAAkBH,IAAlB,CAAD,CAAd,CANW;AAAA;AAAA,mCAOD7B,KAAK,CAACyE,kBAAD,EAAqBjE,SAArB,EAAgCL,IAAhC,CAPJ;;AAAA;AAOlBO,4BAAAA,QAPkB;AAAA,+DAQjB;AACLmB,8BAAAA,IAAI,EAAEA,IADD;AAEL2E,8BAAAA,mBAAmB,EAAEnG,kBAAMuB,UAAN,CAAiBlB,QAAjB;AAFhB,6BARiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mB;;kCAApB6F,iB;;;qBAcN;AACA;AAEA;;;AACME,gBAAAA,e,GAAkB,IAAIC,GAAJ,E;AAClBC,gBAAAA,Y,GAAe,E;;AACrB,kFAAyBvD,MAAzB,uCAAoCI,YAApC,uCAAqDC,WAArD,4BAAmE;AAAvD5B,kBAAAA,IAAuD,YAAvDA,IAAuD;AAC3D+E,kBAAAA,OAD2D,GACjDrH,IAAI,CAACC,SAAL,CAAeqC,IAAf,CADiD;;AAEjE,sBAAI,CAAC4E,eAAe,CAACI,GAAhB,CAAoBD,OAApB,CAAL,EAAmC;AACjCH,oBAAAA,eAAe,CAACK,GAAhB,CAAoBF,OAApB;AACAD,oBAAAA,YAAY,CAACV,IAAb,CAAkBpE,IAAlB;AACD;AACF;;;uBACK6C,WAAW,CACfxB,SADe,EAEfC,aAFe,EAGfC,MAAM,CAACvC,MAHQ,EAIfwC,OAAO,CAACxC,MAJO,EAKf2C,YAAY,CAAC3C,MALE,EAMf4C,WAAW,CAAC5C,MANG,EAOf8F,YAAY,CAAC9F,MAPE,EAQf6C,eAAe,IAAI,IARJ,C;;;AAUjB;AACA;uDACoBN,M;;;;;;;;;;;AAATkC,gBAAAA,K;;uBACHD,eAAe,CAACC,KAAD,C;;;;;;;;;;;;;;;;;;;;;;;;AAGvB;AACA;wDACqBjC,O;;;;;;;;;;;AAAV0D,gBAAAA,M;;qBACLA,MAAM,CAAC/D,U;;;;;;uBACHyC,uBAAuB,CAACsB,MAAM,CAAC/D,UAAR,EAAoB+D,MAAM,CAACrB,SAA3B,C;;;;;;;qBACpBqB,MAAM,CAACtE,Y;;;;;;uBACVmD,sBAAsB,CAC1BmB,MAAM,CAACxE,iBADmB,EAE1BwE,MAAM,CAACtE,YAFmB,EAG1BsE,MAAM,CAACrB,SAHmB,EAI1BqB,MAAM,CAACrE,WAJmB,EAK1BqE,MAAM,CAACpE,iBALmB,EAM1BoE,MAAM,CAACnE,wBANmB,C;;;;;;;sBAStB,IAAIlB,KAAJ,CAAU,MAAV,C;;;;;;;;;;;;;;;;;;;;;;;;;uBAIJyE,aAAa,CAAC7C,MAAD,C;;;;uBAEb8C,aAAa,CAAC7C,MAAD,C;;;sBAEfC,YAAY,CAAC3C,MAAb,GAAsB,C;;;;;wDACE2C,Y;;;;;;;;;;;AAAfwD,gBAAAA,W;;uBACHnB,qBAAqB,CACzBmB,WAAW,CAAClB,IADa,EAEzBkB,WAAW,CAACnF,IAFa,EAGzBmF,WAAW,CAACjB,cAHa,C;;;;;;;;;;;;;;;;;;;;;;;;sBAQ3BtC,WAAW,CAAC5C,MAAZ,GAAqB,C;;;;;wDACE4C,W;;;;;;;;;;;AAAdwD,gBAAAA,U;;uBACHf,oBAAoB,CACxBe,UAAU,CAACpF,IADa,EAExBoF,UAAU,CAACvB,SAFa,C;;;;;;;;;;;;;;;;;;;;;;;;sBAO1BhC,eAAe,IAAI,I;;;;;;uBACf2C,kBAAkB,CAAC3C,eAAD,C;;;;uBAKE4C,mBAAmB,E;;;;AAAvCf,gBAAAA,S,yBAAAA,S;AAER;AACM2B,gBAAAA,S,GAAY,E;yCACCP,Y;;;;;;;;AAAR9E,gBAAAA,K;;uBACa0E,iBAAiB,CAAC1E,KAAD,C;;;AAAjCsF,gBAAAA,O;AACND,gBAAAA,SAAS,CAACjB,IAAV,CAAekB,OAAf;;;;;;;;mDAGK;AACL5B,kBAAAA,SAAS,EAATA,SADK;AAEL2B,kBAAAA,SAAS,EAATA;AAFK,iB;;;;;;;;;;;;;;;;;;KAOX","sourcesContent":["/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// @flow\n\nimport type Transport from \"@ledgerhq/hw-transport\";\nimport { TransportStatusError } from \"@ledgerhq/hw-transport\";\n\nimport utils, { Precondition, Assert } from \"./utils\";\nimport cardano from \"./cardano\";\n\nconst CLA = 0xd7;\n\nconst INS = {\n  GET_VERSION: 0x00,\n  GET_SERIAL: 0x01,\n\n  GET_EXT_PUBLIC_KEY: 0x10,\n  DERIVE_ADDRESS: 0x11,\n\n  SIGN_TX: 0x21,\n\n  RUN_TESTS: 0xf0\n};\n\nexport type BIP32Path = Array<number>;\n\nexport type InputTypeUTxO = {|\n  txHashHex: string,\n  outputIndex: number,\n  path: BIP32Path\n|};\n\nexport type OutputTypeAddress = {|\n  amountStr: string,\n  addressHex: string\n|};\n\nexport type OutputTypeAddressParams = {|\n  addressTypeNibble: number,\n  spendingPath: BIP32Path,\n  amountStr: string,\n  stakingPath: ?BIP32Path,\n  stakingKeyHashHex: ?string,\n  stakingBlockchainPointer: ?StakingBlockchainPointer,\n  amountStr: string\n|};\n\nexport type StakingBlockchainPointer = {|\n  blockIndex: number,\n  txIndex: number,\n  certificateIndex: number\n|}\n\nexport type Certificate = {|\n  type: number,\n  path: BIP32Path,\n  poolKeyHashHex: ?string\n|};\n\nexport type Withdrawal = {|\n  path: BIP32Path,\n  amountStr: string\n|};\n\nexport type Flags = {|\n  isDebug: boolean\n|};\n\nexport type GetVersionResponse = {|\n  major: string,\n  minor: string,\n  patch: string,\n  flags: Flags\n|};\n\nexport type GetSerialResponse = {|\n  serial: string\n|};\n\nexport type DeriveAddressResponse = {|\n  addressHex: string\n|};\n\nexport type GetExtendedPublicKeyResponse = {|\n  publicKeyHex: string,\n  chainCodeHex: string\n|};\n\nexport type Witness = {|\n  path: BIP32Path,\n  // Note: this is *only* a signature\n  // you need to add proper extended public key\n  // to form a full witness\n  witnessSignatureHex: string\n|};\n\nexport type SignTransactionResponse = {|\n  txHashHex: string,\n  witnesses: Array<Witness>\n|};\n\nexport const AddressTypeNibbles = {\n  BASE: 0b0000,\n  POINTER: 0b0100,\n  ENTERPRISE: 0b0110,\n  BYRON: 0b1000,\n  REWARD: 0b1110\n}\n\nconst MetadataCodes = {\n\tSIGN_TX_METADATA_NO: 1,\n\tSIGN_TX_METADATA_YES: 2\n}\n\nconst TxOutputTypeCodes = {\n  SIGN_TX_OUTPUT_TYPE_ADDRESS: 1,\n  SIGN_TX_OUTPUT_TYPE_ADDRESS_PARAMS: 2\n}\n\nexport const ErrorCodes = {\n  ERR_STILL_IN_CALL: 0x6e04, // internal\n  ERR_INVALID_DATA: 0x6e07,\n  ERR_INVALID_BIP_PATH: 0x6e08,\n  ERR_REJECTED_BY_USER: 0x6e09,\n  ERR_REJECTED_BY_POLICY: 0x6e10,\n  ERR_DEVICE_LOCKED: 0x6e11,\n  ERR_UNSUPPORTED_ADDRESS_TYPE: 0x6e12,\n\n  // Not thrown by ledger-app-cardano itself but other apps\n  ERR_CLA_NOT_SUPPORTED: 0x6e00\n};\n\nconst GH_ERRORS_LINK =\n  \"https://github.com/cardano-foundation/ledger-app-cardano/blob/master/src/errors.h\";\n\nconst ErrorMsgs = {\n  [ErrorCodes.ERR_INVALID_DATA]: \"Invalid data supplied to Ledger\",\n  [ErrorCodes.ERR_INVALID_BIP_PATH]:\n    \"Invalid derivation path supplied to Ledger\",\n  [ErrorCodes.ERR_REJECTED_BY_USER]: \"Action rejected by user\",\n  [ErrorCodes.ERR_REJECTED_BY_POLICY]:\n    \"Action rejected by Ledger's security policy\",\n  [ErrorCodes.ERR_DEVICE_LOCKED]: \"Device is locked\",\n  [ErrorCodes.ERR_CLA_NOT_SUPPORTED]: \"Wrong Ledger app\",\n  [ErrorCodes.ERR_UNSUPPORTED_ADDRESS_TYPE]: \"Unsupported address type\"\n};\n\nexport const getErrorDescription = (statusCode: number) => {\n  const statusCodeHex = `0x${statusCode.toString(16)}`;\n  const defaultMsg = `General error ${statusCodeHex}. Please consult ${GH_ERRORS_LINK}`;\n\n  return ErrorMsgs[statusCode] || defaultMsg;\n};\n\n// It can happen that we try to send a message to the device\n// when the device thinks it is still in a middle of previous ADPU stream.\n// This happens mostly if host does abort communication for some reason\n// leaving ledger mid-call.\n// In this case Ledger will respond by ERR_STILL_IN_CALL *and* resetting its state to\n// default. We can therefore transparently retry the request.\n// Note though that only the *first* request in an multi-APDU exchange should be retried.\nconst wrapRetryStillInCall = fn => async (...args: any) => {\n  try {\n    return await fn(...args);\n  } catch (e) {\n    if (e && e.statusCode && e.statusCode === ErrorCodes.ERR_STILL_IN_CALL) {\n      // Do the retry\n      return await fn(...args);\n    }\n    throw e;\n  }\n};\n\nconst wrapConvertError = fn => async (...args) => {\n  try {\n    console.log(JSON.stringify(args));\n    return await fn(...args);\n  } catch (e) {\n    if (e && e.statusCode) {\n      // keep HwTransport.TransportStatusError\n      // just override the message\n      e.message = `Ledger device: ${getErrorDescription(e.statusCode)}`;\n    }\n    throw e;\n  }\n};\n\n/**\n * Cardano ADA API\n *\n * @example\n * import Ada from \"@ledgerhq/hw-app-ada\";\n * const ada = new Ada(transport);\n */\n\ntype SendFn = (number, number, number, number, Buffer) => Promise<Buffer>;\n\nexport default class Ada {\n  transport: Transport<*>;\n  methods: Array<string>;\n  send: SendFn;\n\n  constructor(transport: Transport<*>, scrambleKey: string = \"ADA\") {\n    this.transport = transport;\n    this.methods = [\n      \"getVersion\",\n      \"getSerial\",\n      \"getExtendedPublicKey\",\n      \"signTransaction\",\n      \"deriveAddress\",\n      \"showAddress\"\n    ];\n    this.transport.decorateAppAPIMethods(this, this.methods, scrambleKey);\n    this.send = wrapConvertError(this.transport.send);\n  }\n\n  async _getVersion(): Promise<GetVersionResponse> {\n    const _send = (p1, p2, data) =>\n      this.send(CLA, INS.GET_VERSION, p1, p2, data).then(\n        utils.stripRetcodeFromResponse\n      );\n    const P1_UNUSED = 0x00;\n    const P2_UNUSED = 0x00;\n    // await setTimeout(() => console.log('ahoj'), 3000)\n    const response = await wrapRetryStillInCall(_send)(\n      P1_UNUSED,\n      P2_UNUSED,\n      utils.hex_to_buf(\"\")\n    );\n    Assert.assert(response.length == 4);\n    const [major, minor, patch, flags_value] = response;\n\n    const FLAG_IS_DEBUG = 1;\n    //const FLAG_IS_HEADLESS = 2;\n\n    const flags = {\n      isDebug: (flags_value & FLAG_IS_DEBUG) == FLAG_IS_DEBUG\n    };\n    return { major, minor, patch, flags };\n  }\n\n  /**\n   * Returns an object containing the app version.\n   *\n   * @returns {Promise<GetVersionResponse>} Result object containing the application version number.\n   *\n   * @example\n   * const { major, minor, patch, flags } = await ada.getVersion();\n   * console.log(`App version ${major}.${minor}.${patch}`);\n   *\n   */\n  async getVersion(): Promise<GetVersionResponse> {\n    return this._getVersion();\n  }\n\n  _isGetSerialSupported(version: GetVersionResponse): boolean {\n    const major = parseInt(version.major);\n    const minor = parseInt(version.minor);\n    const patch = parseInt(version.patch);\n    if (isNaN(major) || isNaN(minor) || isNaN(patch))\n      return false;\n\n    if (major > 1) {\n      return true;\n    } else if (major == 1) {\n      return minor >= 2;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Returns an object containing the device serial number.\n   *\n   * @returns {Promise<GetSerialResponse>} Result object containing the device serial number.\n   *\n   * @example\n   * const { serial } = await ada.getSerial();\n   * console.log(`Serial number ${serial}`);\n   *\n   */\n  async getSerial(): Promise<GetSerialResponse> {\n    const version = await this._getVersion();\n    if (!this._isGetSerialSupported(version))\n      throw new Error(\"getSerial not supported by device firmware\");\n\n    const _send = (p1, p2, data) =>\n      this.send(CLA, INS.GET_SERIAL, p1, p2, data).then(\n        utils.stripRetcodeFromResponse\n      );\n    const P1_UNUSED = 0x00;\n    const P2_UNUSED = 0x00;\n    const response = await wrapRetryStillInCall(_send)(\n      P1_UNUSED,\n      P2_UNUSED,\n      utils.hex_to_buf(\"\")\n    );\n    Assert.assert(response.length == 7);\n\n    const serial = utils.buf_to_hex(response);\n    return { serial };\n  }\n\n  /**\n   * Runs unit tests on the device (DEVEL app build only)\n   *\n   * @returns {Promise<void>}\n   */\n  async runTests(): Promise<void> {\n    await wrapRetryStillInCall(this.send)(CLA, INS.RUN_TESTS, 0x00, 0x00);\n  }\n\n  /**\n   * @description Get a public key from the specified BIP 32 path.\n   *\n   * @param {BIP32Path} indexes The path indexes. Path must begin with `44'/1815'/n'`, and may be up to 10 indexes long.\n   * @return {Promise<GetExtendedPublicKeyResponse>} The public key with chaincode for the given path.\n   *\n   * @example\n   * const { publicKey, chainCode } = await ada.getExtendedPublicKey([ HARDENED + 44, HARDENED + 1815, HARDENED + 1 ]);\n   * console.log(publicKey);\n   *\n   */\n  async getExtendedPublicKey(\n    path: BIP32Path\n  ): Promise<GetExtendedPublicKeyResponse> {\n    Precondition.checkIsValidPath(path);\n\n    const _send = (p1, p2, data) =>\n      this.send(CLA, INS.GET_EXT_PUBLIC_KEY, p1, p2, data).then(\n        utils.stripRetcodeFromResponse\n      );\n\n    const P1_UNUSED = 0x00;\n    const P2_UNUSED = 0x00;\n\n    const data = utils.path_to_buf(path);\n\n    const response = await wrapRetryStillInCall(_send)(\n      P1_UNUSED,\n      P2_UNUSED,\n      data\n    );\n\n    const [publicKey, chainCode, rest] = utils.chunkBy(response, [32, 32]);\n    Assert.assert(rest.length == 0);\n\n    return {\n      publicKeyHex: publicKey.toString(\"hex\"),\n      chainCodeHex: chainCode.toString(\"hex\")\n    };\n  }\n\n  /**\n   * @description Gets an address from the specified BIP 32 path.\n   *\n   * @param {BIP32Path} indexes The path indexes. Path must begin with `44'/1815'/i'/(0 or 1)/j`, and may be up to 10 indexes long.\n   * @return {Promise<DeriveAddressResponse>} The address for the given path.\n   *\n   * @throws 5001 - The path provided does not have the first 3 indexes hardened or 4th index is not 0 or 1\n   * @throws 5002 - The path provided is less than 5 indexes\n   * @throws 5003 - Some of the indexes is not a number\n   *\n   * TODO update error codes\n   *\n   * @example\n   * const { address } = await ada.deriveAddress(\n   *   0b1000, // byron address\n   *   764824073,\n   *   [ HARDENED | 44, HARDENED | 1815, HARDENED | 1, 0, 5 ],\n   *   null\n   *   null\n   *   null\n   * );\n   *\n   * @example\n   * const { address } = await ada.deriveAddress(\n   *   0b0000, // base address\n   *   0x00,\n   *   [ HARDENED | 1852, HARDENED | 1815, HARDENED | 0, 0, 5 ],\n   *   [ HARDENED | 1852, HARDENED | 1815, HARDENED | 0, 2, 0 ]\n   *   null\n   *   null\n   * );\n   *\n   */\n  async deriveAddress(\n      addressTypeNibble: number,\n      networkIdOrProtocolMagic: number,\n      spendingPath: BIP32Path,\n      stakingPath: ?BIP32Path = null,\n      stakingKeyHashHex: ?string = null,\n      stakingBlockchainPointer: ?StakingBlockchainPointer = null\n      ): Promise<DeriveAddressResponse> {\n    const _send = (p1, p2, data) =>\n      this.send(CLA, INS.DERIVE_ADDRESS, p1, p2, data).then(\n        utils.stripRetcodeFromResponse\n      );\n\n    const P1_RETURN = 0x01;\n    const P2_UNUSED = 0x00;\n\n    \n    const data = cardano.serializeAddressInfo(\n      addressTypeNibble,\n      networkIdOrProtocolMagic,\n      spendingPath,\n      stakingPath,\n      stakingKeyHashHex,\n      stakingBlockchainPointer\n    );\n\n    const response = await _send(P1_RETURN, P2_UNUSED, data);\n\n    return {\n      addressHex: response.toString('hex')\n    };\n  }\n\n  async showAddress(\n      addressTypeNibble: number,\n      networkIdOrProtocolMagic: number,\n      spendingPath: BIP32Path,\n      stakingPath: ?BIP32Path = null,\n      stakingKeyHashHex: ?string = null,\n      stakingBlockchainPointer: ?StakingBlockchainPointer = null\n  ): Promise<void> {\n    const _send = (p1, p2, data) =>\n      this.send(CLA, INS.DERIVE_ADDRESS, p1, p2, data).then(\n        utils.stripRetcodeFromResponse\n      );\n\n    const P1_DISPLAY = 0x02;\n    const P2_UNUSED = 0x00;\n    const data = cardano.serializeAddressInfo(\n      addressTypeNibble,\n      networkIdOrProtocolMagic,\n      spendingPath,\n      stakingPath,\n      stakingKeyHashHex,\n      stakingBlockchainPointer\n    );\n\n    const response = await _send(P1_DISPLAY, P2_UNUSED, data);\n    Assert.assert(response.length == 0);\n  }\n\n  async signTransaction(\n    networkId: number,\n    protocolMagic: number,\n    inputs: Array<InputTypeUTxO>,\n    outputs: Array<OutputTypeAddress | OutputTypeAddressParams>,\n    feeStr: string,\n    ttlStr: string,\n    certificates: Array<Certificate>,\n    withdrawals: Array<Withdrawal>,\n    metadataHashHex: ?string\n  ): Promise<SignTransactionResponse> {\n    //console.log(\"sign\");\n\n    const P1_STAGE_INIT = 0x01;\n    const P1_STAGE_INPUTS = 0x02;\n    const P1_STAGE_OUTPUTS = 0x03;\n    const P1_STAGE_FEE = 0x04;\n    const P1_STAGE_TTL = 0x05;\n    const P1_STAGE_CERTIFICATES = 0x06;\n    const P1_STAGE_WITHDRAWALS = 0x07;\n    const P1_STAGE_METADATA = 0x08;\n    const P1_STAGE_CONFIRM = 0x09;\n    const P1_STAGE_WITNESSES = 0x0a;\n    const P2_UNUSED = 0x00;\n\n    function delay(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    const _send = async (p1, p2, data) => {\n      return delay(5000).then(() => this.send(CLA, INS.SIGN_TX, p1, p2, data).then(\n        utils.stripRetcodeFromResponse\n      ))\n    }\n\n    const signTx_init = async (\n      networkId: number,\n      protocolMagic: number,\n      numInputs: number,\n      numOutputs: number,\n      numCertificates: number,\n      numWithdrawals: number,\n      numWitnesses: number,\n      includeMetadata: boolean,\n    ): Promise<void> => {\n      const data = Buffer.concat([\n        utils.uint8_to_buf(networkId),\n        utils.uint32_to_buf(protocolMagic),\n        utils.uint8_to_buf(\n          includeMetadata\n          ? MetadataCodes.SIGN_TX_METADATA_YES\n          : MetadataCodes.SIGN_TX_METADATA_NO\n        ),\n        utils.uint32_to_buf(numInputs),\n        utils.uint32_to_buf(numOutputs),\n        utils.uint32_to_buf(numCertificates),\n        utils.uint32_to_buf(numWithdrawals),\n        utils.uint32_to_buf(numWitnesses),\n      ]);\n      const response = await wrapRetryStillInCall(_send)(\n        P1_STAGE_INIT,\n        P2_UNUSED,\n        data\n      );\n      Assert.assert(response.length == 0);\n    };\n\n    const signTx_addInput = async (\n      input: InputTypeUTxO\n    ): Promise<void> => {\n      const data = Buffer.concat([\n        utils.hex_to_buf(input.txHashHex),\n        utils.uint32_to_buf(input.outputIndex),\n      ]);\n      console.log('input', JSON.stringify(input))\n      const response = await _send(P1_STAGE_INPUTS, P2_UNUSED, data);\n      Assert.assert(response.length == 0);\n    };\n\n    const signTx_addAddressOutput = async (\n      addressHex: string,\n      amountStr: string\n    ): Promise<void> => {\n      const data = Buffer.concat([\n        utils.amount_to_buf(amountStr),\n        utils.uint8_to_buf(TxOutputTypeCodes.SIGN_TX_OUTPUT_TYPE_ADDRESS),\n        utils.hex_to_buf(addressHex)\n      ]);\n      console.log('output', JSON.stringify({addressHex, amountStr}))\n      const response = await _send(P1_STAGE_OUTPUTS, P2_UNUSED, data);\n      Assert.assert(response.length == 0);\n    };\n\n    const signTx_addChangeOutput = async (\n      addressTypeNibble: number,\n      spendingPath: BIP32Path,\n      amountStr: string,\n      stakingPath: ?BIP32Path = null,\n      stakingKeyHashHex: ?string = null,\n      stakingBlockchainPointer: ?StakingBlockchainPointer = null,\n    ): Promise<void> => {\n\n\n      const data = Buffer.concat([\n        utils.amount_to_buf(amountStr),\n        utils.uint8_to_buf(TxOutputTypeCodes.SIGN_TX_OUTPUT_TYPE_ADDRESS_PARAMS),\n        cardano.serializeAddressInfo(\n          addressTypeNibble,\n          addressTypeNibble == AddressTypeNibbles.BYRON ? protocolMagic : networkId,\n          spendingPath,\n          stakingPath,\n          stakingKeyHashHex,\n          stakingBlockchainPointer\n        )\n      ]);\n      console.log('change_output', JSON.stringify({addressTypeNibble,\n        spendingPath,\n        amountStr,\n        stakingPath,\n        stakingKeyHashHex,\n        stakingBlockchainPointer\n      }))\n      const response = await _send(P1_STAGE_OUTPUTS, P2_UNUSED, data);\n      Assert.assert(response.length == 0);\n    };\n\n    const signTx_addCertificate = async (\n      type: number,\n      path: BIP32Path,\n      poolKeyHashHex: ?string\n    ): Promise<void> => {\n      const dataFields = [\n        utils.uint8_to_buf(type),\n        utils.path_to_buf(path),\n      ];\n\n      if (poolKeyHashHex != null) {\n        dataFields.push(utils.hex_to_buf(poolKeyHashHex));\n      }\n      console.log('certificate', JSON.stringify({type, path, poolKeyHashHex}))\n      const data = Buffer.concat(dataFields);\n      const response = await _send(P1_STAGE_CERTIFICATES, P2_UNUSED, data);\n      Assert.assert(response.length == 0);\n    }\n\n    const signTx_addWithdrawal = async (\n      path: BIP32Path,\n      amountStr: string,\n    ): Promise<void> => {\n      const data = Buffer.concat([\n        utils.amount_to_buf(amountStr),\n        utils.path_to_buf(path)\n      ]);\n      console.log('withdrawal', JSON.stringify({path, amountStr}))\n      const response = await _send(P1_STAGE_WITHDRAWALS, P2_UNUSED, data);\n      Assert.assert(response.length == 0);\n    }\n\n    const signTx_setFee = async (\n      feeStr: string\n    ): Promise<void> => {\n      const data = Buffer.concat([\n        utils.amount_to_buf(feeStr),\n      ]);\n      console.log('fee', JSON.stringify({feeStr}))\n      const response = await _send(P1_STAGE_FEE, P2_UNUSED, data);\n      Assert.assert(response.length == 0);\n    };\n\n    const signTx_setTtl = async (\n      ttlStr: string\n    ): Promise<void> => {\n      const data = Buffer.concat([\n        utils.amount_to_buf(ttlStr),\n      ]);\n      console.log('tll', JSON.stringify({ttlStr}))\n      const response = await _send(P1_STAGE_TTL, P2_UNUSED, data);\n      Assert.assert(response.length == 0);\n    };\n\n    const signTx_setMetadata = async (\n      metadataHashHex: string\n    ): Promise<void> => {\n      const data = utils.hex_to_buf(metadataHashHex);\n\n      const response = await _send(P1_STAGE_METADATA, P2_UNUSED, data);\n      Assert.assert(response.length == 0);\n    };\n\n    const signTx_awaitConfirm = async (): Promise<{\n      txHashHex: string\n    }> => {\n      const response = await _send(\n        P1_STAGE_CONFIRM,\n        P2_UNUSED,\n        utils.hex_to_buf(\"\")\n      );\n      return {\n        txHashHex: response.toString(\"hex\")\n      };\n    };\n\n    const signTx_getWitness = async (\n      path: BIP32Path\n    ): Promise<{|\n      path: BIP32Path,\n      witnessSignatureHex: string\n    |}> => {\n      const data = Buffer.concat([utils.path_to_buf(path)]);\n      const response = await _send(P1_STAGE_WITNESSES, P2_UNUSED, data);\n      return {\n        path: path,\n        witnessSignatureHex: utils.buf_to_hex(response)\n      };\n    };\n\n    // init\n    //console.log(\"init\");\n    \n    // for unique witness paths\n    const witnessPathsSet = new Set();\n    const witnessPaths = [];\n    for (const {path} of [...inputs, ...certificates, ...withdrawals]) {\n      const pathKey = JSON.stringify(path);\n      if (!witnessPathsSet.has(pathKey)) {\n        witnessPathsSet.add(pathKey);\n        witnessPaths.push(path);\n      }\n    }\n    await signTx_init(\n      networkId,\n      protocolMagic,\n      inputs.length,\n      outputs.length,\n      certificates.length,\n      withdrawals.length,\n      witnessPaths.length,\n      metadataHashHex != null\n    )\n    // inputs\n    //console.log(\"inputs\");\n    for (const input of inputs) {\n      await signTx_addInput(input);\n    }\n\n    // outputs\n    //console.log(\"outputs\");\n    for (const output of outputs) {\n      if (output.addressHex) {\n        await signTx_addAddressOutput(output.addressHex, output.amountStr);\n      } else if (output.spendingPath) {\n        await signTx_addChangeOutput(\n          output.addressTypeNibble,\n          output.spendingPath,\n          output.amountStr,\n          output.stakingPath,\n          output.stakingKeyHashHex,\n          output.stakingBlockchainPointer,\n        );\n      } else {\n        throw new Error(\"TODO\");\n      }\n    }\n\n    await signTx_setFee(feeStr);\n\n    await signTx_setTtl(ttlStr);\n\n    if (certificates.length > 0) {\n      for (const certificate of certificates) {\n        await signTx_addCertificate(\n          certificate.type,\n          certificate.path,\n          certificate.poolKeyHashHex\n        )\n      }\n    }\n\n    if (withdrawals.length > 0) {\n      for (const withdrawal of withdrawals) {\n        await signTx_addWithdrawal(\n          withdrawal.path,\n          withdrawal.amountStr\n        )\n      }\n    }\n\n    if (metadataHashHex != null) {\n      await signTx_setMetadata(metadataHashHex);\n    }\n\n    // confirm\n    //console.log(\"confirm\");\n    const { txHashHex } = await signTx_awaitConfirm();\n\n    //console.log(\"witnesses\");\n    const witnesses = [];\n    for (const path of witnessPaths) {\n      const witness = await signTx_getWitness(path);\n      witnesses.push(witness);\n    }\n\n    return {\n      txHashHex,\n      witnesses\n    };\n  }\n}\n\n// reexport\nexport {\n  cardano,\n  utils\n};\n"],"file":"Ada.js"}